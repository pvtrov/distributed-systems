// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greenhouse_conditions.proto

// Protobuf Java Version: 4.26.1
package org.agh.edu.pl.gen;

/**
 * Protobuf type {@code Conditions}
 */
public final class Conditions extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Conditions)
    ConditionsOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      Conditions.class.getName());
  }
  // Use Conditions.newBuilder() to construct.
  private Conditions(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Conditions() {
    greenhouse_ = "";
    light_ = java.util.Collections.emptyList();
    soil_ = java.util.Collections.emptyList();
    plantType_ = 0;
    fertilizerType_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return GreenhouseConditionsProto.internal_static_Conditions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return GreenhouseConditionsProto.internal_static_Conditions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            Conditions.class, Conditions.Builder.class);
  }

  public static final int GREENHOUSE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object greenhouse_ = "";
  /**
   * <code>string greenhouse = 1;</code>
   * @return The greenhouse.
   */
  @java.lang.Override
  public java.lang.String getGreenhouse() {
    java.lang.Object ref = greenhouse_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      greenhouse_ = s;
      return s;
    }
  }
  /**
   * <code>string greenhouse = 1;</code>
   * @return The bytes for greenhouse.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGreenhouseBytes() {
    java.lang.Object ref = greenhouse_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      greenhouse_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEMPERATURE_FIELD_NUMBER = 2;
  private float temperature_ = 0F;
  /**
   * <code>float temperature = 2;</code>
   * @return The temperature.
   */
  @java.lang.Override
  public float getTemperature() {
    return temperature_;
  }

  public static final int HUMIDITY_FIELD_NUMBER = 3;
  private float humidity_ = 0F;
  /**
   * <code>float humidity = 3;</code>
   * @return The humidity.
   */
  @java.lang.Override
  public float getHumidity() {
    return humidity_;
  }

  public static final int IS_DAYTIME_FIELD_NUMBER = 4;
  private boolean isDaytime_ = false;
  /**
   * <code>bool is_daytime = 4;</code>
   * @return The isDaytime.
   */
  @java.lang.Override
  public boolean getIsDaytime() {
    return isDaytime_;
  }

  public static final int LIGHT_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<Light> light_;
  /**
   * <code>repeated .Light light = 5;</code>
   */
  @java.lang.Override
  public java.util.List<Light> getLightList() {
    return light_;
  }
  /**
   * <code>repeated .Light light = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends LightOrBuilder>
      getLightOrBuilderList() {
    return light_;
  }
  /**
   * <code>repeated .Light light = 5;</code>
   */
  @java.lang.Override
  public int getLightCount() {
    return light_.size();
  }
  /**
   * <code>repeated .Light light = 5;</code>
   */
  @java.lang.Override
  public Light getLight(int index) {
    return light_.get(index);
  }
  /**
   * <code>repeated .Light light = 5;</code>
   */
  @java.lang.Override
  public LightOrBuilder getLightOrBuilder(
      int index) {
    return light_.get(index);
  }

  public static final int SOIL_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<Soil> soil_;
  /**
   * <code>repeated .Soil soil = 6;</code>
   */
  @java.lang.Override
  public java.util.List<Soil> getSoilList() {
    return soil_;
  }
  /**
   * <code>repeated .Soil soil = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends SoilOrBuilder>
      getSoilOrBuilderList() {
    return soil_;
  }
  /**
   * <code>repeated .Soil soil = 6;</code>
   */
  @java.lang.Override
  public int getSoilCount() {
    return soil_.size();
  }
  /**
   * <code>repeated .Soil soil = 6;</code>
   */
  @java.lang.Override
  public Soil getSoil(int index) {
    return soil_.get(index);
  }
  /**
   * <code>repeated .Soil soil = 6;</code>
   */
  @java.lang.Override
  public SoilOrBuilder getSoilOrBuilder(
      int index) {
    return soil_.get(index);
  }

  public static final int CO2_LEVEL_FIELD_NUMBER = 7;
  private float co2Level_ = 0F;
  /**
   * <code>float co2_level = 7;</code>
   * @return The co2Level.
   */
  @java.lang.Override
  public float getCo2Level() {
    return co2Level_;
  }

  public static final int NITROGEN_LEVEL_FIELD_NUMBER = 8;
  private float nitrogenLevel_ = 0F;
  /**
   * <code>float nitrogen_level = 8;</code>
   * @return The nitrogenLevel.
   */
  @java.lang.Override
  public float getNitrogenLevel() {
    return nitrogenLevel_;
  }

  public static final int PLANT_TYPE_FIELD_NUMBER = 9;
  private int plantType_ = 0;
  /**
   * <code>.PlantType plant_type = 9;</code>
   * @return The enum numeric value on the wire for plantType.
   */
  @java.lang.Override public int getPlantTypeValue() {
    return plantType_;
  }
  /**
   * <code>.PlantType plant_type = 9;</code>
   * @return The plantType.
   */
  @java.lang.Override public PlantType getPlantType() {
    PlantType result = PlantType.forNumber(plantType_);
    return result == null ? PlantType.UNRECOGNIZED : result;
  }

  public static final int FERTILIZER_TYPE_FIELD_NUMBER = 10;
  private int fertilizerType_ = 0;
  /**
   * <code>.FertilizerType fertilizer_type = 10;</code>
   * @return The enum numeric value on the wire for fertilizerType.
   */
  @java.lang.Override public int getFertilizerTypeValue() {
    return fertilizerType_;
  }
  /**
   * <code>.FertilizerType fertilizer_type = 10;</code>
   * @return The fertilizerType.
   */
  @java.lang.Override public FertilizerType getFertilizerType() {
    FertilizerType result = FertilizerType.forNumber(fertilizerType_);
    return result == null ? FertilizerType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(greenhouse_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, greenhouse_);
    }
    if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
      output.writeFloat(2, temperature_);
    }
    if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
      output.writeFloat(3, humidity_);
    }
    if (isDaytime_ != false) {
      output.writeBool(4, isDaytime_);
    }
    for (int i = 0; i < light_.size(); i++) {
      output.writeMessage(5, light_.get(i));
    }
    for (int i = 0; i < soil_.size(); i++) {
      output.writeMessage(6, soil_.get(i));
    }
    if (java.lang.Float.floatToRawIntBits(co2Level_) != 0) {
      output.writeFloat(7, co2Level_);
    }
    if (java.lang.Float.floatToRawIntBits(nitrogenLevel_) != 0) {
      output.writeFloat(8, nitrogenLevel_);
    }
    if (plantType_ != PlantType.FLOWER.getNumber()) {
      output.writeEnum(9, plantType_);
    }
    if (fertilizerType_ != FertilizerType.ORGANIC.getNumber()) {
      output.writeEnum(10, fertilizerType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(greenhouse_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, greenhouse_);
    }
    if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, temperature_);
    }
    if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, humidity_);
    }
    if (isDaytime_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, isDaytime_);
    }
    for (int i = 0; i < light_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, light_.get(i));
    }
    for (int i = 0; i < soil_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, soil_.get(i));
    }
    if (java.lang.Float.floatToRawIntBits(co2Level_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, co2Level_);
    }
    if (java.lang.Float.floatToRawIntBits(nitrogenLevel_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, nitrogenLevel_);
    }
    if (plantType_ != PlantType.FLOWER.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, plantType_);
    }
    if (fertilizerType_ != FertilizerType.ORGANIC.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(10, fertilizerType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof Conditions)) {
      return super.equals(obj);
    }
    Conditions other = (Conditions) obj;

    if (!getGreenhouse()
        .equals(other.getGreenhouse())) return false;
    if (java.lang.Float.floatToIntBits(getTemperature())
        != java.lang.Float.floatToIntBits(
            other.getTemperature())) return false;
    if (java.lang.Float.floatToIntBits(getHumidity())
        != java.lang.Float.floatToIntBits(
            other.getHumidity())) return false;
    if (getIsDaytime()
        != other.getIsDaytime()) return false;
    if (!getLightList()
        .equals(other.getLightList())) return false;
    if (!getSoilList()
        .equals(other.getSoilList())) return false;
    if (java.lang.Float.floatToIntBits(getCo2Level())
        != java.lang.Float.floatToIntBits(
            other.getCo2Level())) return false;
    if (java.lang.Float.floatToIntBits(getNitrogenLevel())
        != java.lang.Float.floatToIntBits(
            other.getNitrogenLevel())) return false;
    if (plantType_ != other.plantType_) return false;
    if (fertilizerType_ != other.fertilizerType_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GREENHOUSE_FIELD_NUMBER;
    hash = (53 * hash) + getGreenhouse().hashCode();
    hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getTemperature());
    hash = (37 * hash) + HUMIDITY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getHumidity());
    hash = (37 * hash) + IS_DAYTIME_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsDaytime());
    if (getLightCount() > 0) {
      hash = (37 * hash) + LIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getLightList().hashCode();
    }
    if (getSoilCount() > 0) {
      hash = (37 * hash) + SOIL_FIELD_NUMBER;
      hash = (53 * hash) + getSoilList().hashCode();
    }
    hash = (37 * hash) + CO2_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getCo2Level());
    hash = (37 * hash) + NITROGEN_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getNitrogenLevel());
    hash = (37 * hash) + PLANT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + plantType_;
    hash = (37 * hash) + FERTILIZER_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + fertilizerType_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Conditions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Conditions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Conditions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Conditions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Conditions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Conditions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Conditions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static Conditions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static Conditions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static Conditions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static Conditions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static Conditions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Conditions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code Conditions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Conditions)
          ConditionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return GreenhouseConditionsProto.internal_static_Conditions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return GreenhouseConditionsProto.internal_static_Conditions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Conditions.class, Conditions.Builder.class);
    }

    // Construct using gen.Conditions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      greenhouse_ = "";
      temperature_ = 0F;
      humidity_ = 0F;
      isDaytime_ = false;
      if (lightBuilder_ == null) {
        light_ = java.util.Collections.emptyList();
      } else {
        light_ = null;
        lightBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      if (soilBuilder_ == null) {
        soil_ = java.util.Collections.emptyList();
      } else {
        soil_ = null;
        soilBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      co2Level_ = 0F;
      nitrogenLevel_ = 0F;
      plantType_ = 0;
      fertilizerType_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return GreenhouseConditionsProto.internal_static_Conditions_descriptor;
    }

    @java.lang.Override
    public Conditions getDefaultInstanceForType() {
      return Conditions.getDefaultInstance();
    }

    @java.lang.Override
    public Conditions build() {
      Conditions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public Conditions buildPartial() {
      Conditions result = new Conditions(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(Conditions result) {
      if (lightBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          light_ = java.util.Collections.unmodifiableList(light_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.light_ = light_;
      } else {
        result.light_ = lightBuilder_.build();
      }
      if (soilBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          soil_ = java.util.Collections.unmodifiableList(soil_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.soil_ = soil_;
      } else {
        result.soil_ = soilBuilder_.build();
      }
    }

    private void buildPartial0(Conditions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.greenhouse_ = greenhouse_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.temperature_ = temperature_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.humidity_ = humidity_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.isDaytime_ = isDaytime_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.co2Level_ = co2Level_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.nitrogenLevel_ = nitrogenLevel_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.plantType_ = plantType_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.fertilizerType_ = fertilizerType_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof Conditions) {
        return mergeFrom((Conditions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Conditions other) {
      if (other == Conditions.getDefaultInstance()) return this;
      if (!other.getGreenhouse().isEmpty()) {
        greenhouse_ = other.greenhouse_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getTemperature() != 0F) {
        setTemperature(other.getTemperature());
      }
      if (other.getHumidity() != 0F) {
        setHumidity(other.getHumidity());
      }
      if (other.getIsDaytime() != false) {
        setIsDaytime(other.getIsDaytime());
      }
      if (lightBuilder_ == null) {
        if (!other.light_.isEmpty()) {
          if (light_.isEmpty()) {
            light_ = other.light_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLightIsMutable();
            light_.addAll(other.light_);
          }
          onChanged();
        }
      } else {
        if (!other.light_.isEmpty()) {
          if (lightBuilder_.isEmpty()) {
            lightBuilder_.dispose();
            lightBuilder_ = null;
            light_ = other.light_;
            bitField0_ = (bitField0_ & ~0x00000010);
            lightBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getLightFieldBuilder() : null;
          } else {
            lightBuilder_.addAllMessages(other.light_);
          }
        }
      }
      if (soilBuilder_ == null) {
        if (!other.soil_.isEmpty()) {
          if (soil_.isEmpty()) {
            soil_ = other.soil_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSoilIsMutable();
            soil_.addAll(other.soil_);
          }
          onChanged();
        }
      } else {
        if (!other.soil_.isEmpty()) {
          if (soilBuilder_.isEmpty()) {
            soilBuilder_.dispose();
            soilBuilder_ = null;
            soil_ = other.soil_;
            bitField0_ = (bitField0_ & ~0x00000020);
            soilBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getSoilFieldBuilder() : null;
          } else {
            soilBuilder_.addAllMessages(other.soil_);
          }
        }
      }
      if (other.getCo2Level() != 0F) {
        setCo2Level(other.getCo2Level());
      }
      if (other.getNitrogenLevel() != 0F) {
        setNitrogenLevel(other.getNitrogenLevel());
      }
      if (other.plantType_ != 0) {
        setPlantTypeValue(other.getPlantTypeValue());
      }
      if (other.fertilizerType_ != 0) {
        setFertilizerTypeValue(other.getFertilizerTypeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              greenhouse_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 21: {
              temperature_ = input.readFloat();
              bitField0_ |= 0x00000002;
              break;
            } // case 21
            case 29: {
              humidity_ = input.readFloat();
              bitField0_ |= 0x00000004;
              break;
            } // case 29
            case 32: {
              isDaytime_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              Light m =
                  input.readMessage(
                      Light.parser(),
                      extensionRegistry);
              if (lightBuilder_ == null) {
                ensureLightIsMutable();
                light_.add(m);
              } else {
                lightBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              Soil m =
                  input.readMessage(
                      Soil.parser(),
                      extensionRegistry);
              if (soilBuilder_ == null) {
                ensureSoilIsMutable();
                soil_.add(m);
              } else {
                soilBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 61: {
              co2Level_ = input.readFloat();
              bitField0_ |= 0x00000040;
              break;
            } // case 61
            case 69: {
              nitrogenLevel_ = input.readFloat();
              bitField0_ |= 0x00000080;
              break;
            } // case 69
            case 72: {
              plantType_ = input.readEnum();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              fertilizerType_ = input.readEnum();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object greenhouse_ = "";
    /**
     * <code>string greenhouse = 1;</code>
     * @return The greenhouse.
     */
    public java.lang.String getGreenhouse() {
      java.lang.Object ref = greenhouse_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        greenhouse_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string greenhouse = 1;</code>
     * @return The bytes for greenhouse.
     */
    public com.google.protobuf.ByteString
        getGreenhouseBytes() {
      java.lang.Object ref = greenhouse_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        greenhouse_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string greenhouse = 1;</code>
     * @param value The greenhouse to set.
     * @return This builder for chaining.
     */
    public Builder setGreenhouse(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      greenhouse_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string greenhouse = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearGreenhouse() {
      greenhouse_ = getDefaultInstance().getGreenhouse();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string greenhouse = 1;</code>
     * @param value The bytes for greenhouse to set.
     * @return This builder for chaining.
     */
    public Builder setGreenhouseBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      greenhouse_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private float temperature_ ;
    /**
     * <code>float temperature = 2;</code>
     * @return The temperature.
     */
    @java.lang.Override
    public float getTemperature() {
      return temperature_;
    }
    /**
     * <code>float temperature = 2;</code>
     * @param value The temperature to set.
     * @return This builder for chaining.
     */
    public Builder setTemperature(float value) {

      temperature_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>float temperature = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTemperature() {
      bitField0_ = (bitField0_ & ~0x00000002);
      temperature_ = 0F;
      onChanged();
      return this;
    }

    private float humidity_ ;
    /**
     * <code>float humidity = 3;</code>
     * @return The humidity.
     */
    @java.lang.Override
    public float getHumidity() {
      return humidity_;
    }
    /**
     * <code>float humidity = 3;</code>
     * @param value The humidity to set.
     * @return This builder for chaining.
     */
    public Builder setHumidity(float value) {

      humidity_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>float humidity = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearHumidity() {
      bitField0_ = (bitField0_ & ~0x00000004);
      humidity_ = 0F;
      onChanged();
      return this;
    }

    private boolean isDaytime_ ;
    /**
     * <code>bool is_daytime = 4;</code>
     * @return The isDaytime.
     */
    @java.lang.Override
    public boolean getIsDaytime() {
      return isDaytime_;
    }
    /**
     * <code>bool is_daytime = 4;</code>
     * @param value The isDaytime to set.
     * @return This builder for chaining.
     */
    public Builder setIsDaytime(boolean value) {

      isDaytime_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>bool is_daytime = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsDaytime() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isDaytime_ = false;
      onChanged();
      return this;
    }

    private java.util.List<Light> light_ =
      java.util.Collections.emptyList();
    private void ensureLightIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        light_ = new java.util.ArrayList<Light>(light_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
            Light, Light.Builder, LightOrBuilder> lightBuilder_;

    /**
     * <code>repeated .Light light = 5;</code>
     */
    public java.util.List<Light> getLightList() {
      if (lightBuilder_ == null) {
        return java.util.Collections.unmodifiableList(light_);
      } else {
        return lightBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public int getLightCount() {
      if (lightBuilder_ == null) {
        return light_.size();
      } else {
        return lightBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Light getLight(int index) {
      if (lightBuilder_ == null) {
        return light_.get(index);
      } else {
        return lightBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder setLight(
        int index, Light value) {
      if (lightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLightIsMutable();
        light_.set(index, value);
        onChanged();
      } else {
        lightBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder setLight(
        int index, Light.Builder builderForValue) {
      if (lightBuilder_ == null) {
        ensureLightIsMutable();
        light_.set(index, builderForValue.build());
        onChanged();
      } else {
        lightBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder addLight(Light value) {
      if (lightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLightIsMutable();
        light_.add(value);
        onChanged();
      } else {
        lightBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder addLight(
        int index, Light value) {
      if (lightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLightIsMutable();
        light_.add(index, value);
        onChanged();
      } else {
        lightBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder addLight(
        Light.Builder builderForValue) {
      if (lightBuilder_ == null) {
        ensureLightIsMutable();
        light_.add(builderForValue.build());
        onChanged();
      } else {
        lightBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder addLight(
        int index, Light.Builder builderForValue) {
      if (lightBuilder_ == null) {
        ensureLightIsMutable();
        light_.add(index, builderForValue.build());
        onChanged();
      } else {
        lightBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder addAllLight(
        java.lang.Iterable<? extends Light> values) {
      if (lightBuilder_ == null) {
        ensureLightIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, light_);
        onChanged();
      } else {
        lightBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder clearLight() {
      if (lightBuilder_ == null) {
        light_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        lightBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Builder removeLight(int index) {
      if (lightBuilder_ == null) {
        ensureLightIsMutable();
        light_.remove(index);
        onChanged();
      } else {
        lightBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Light.Builder getLightBuilder(
        int index) {
      return getLightFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public LightOrBuilder getLightOrBuilder(
        int index) {
      if (lightBuilder_ == null) {
        return light_.get(index);  } else {
        return lightBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public java.util.List<? extends LightOrBuilder>
         getLightOrBuilderList() {
      if (lightBuilder_ != null) {
        return lightBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(light_);
      }
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Light.Builder addLightBuilder() {
      return getLightFieldBuilder().addBuilder(
          Light.getDefaultInstance());
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public Light.Builder addLightBuilder(
        int index) {
      return getLightFieldBuilder().addBuilder(
          index, Light.getDefaultInstance());
    }
    /**
     * <code>repeated .Light light = 5;</code>
     */
    public java.util.List<Light.Builder>
         getLightBuilderList() {
      return getLightFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
            Light, Light.Builder, LightOrBuilder>
        getLightFieldBuilder() {
      if (lightBuilder_ == null) {
        lightBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                Light, Light.Builder, LightOrBuilder>(
                light_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        light_ = null;
      }
      return lightBuilder_;
    }

    private java.util.List<Soil> soil_ =
      java.util.Collections.emptyList();
    private void ensureSoilIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        soil_ = new java.util.ArrayList<Soil>(soil_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
            Soil, Soil.Builder, SoilOrBuilder> soilBuilder_;

    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public java.util.List<Soil> getSoilList() {
      if (soilBuilder_ == null) {
        return java.util.Collections.unmodifiableList(soil_);
      } else {
        return soilBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public int getSoilCount() {
      if (soilBuilder_ == null) {
        return soil_.size();
      } else {
        return soilBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Soil getSoil(int index) {
      if (soilBuilder_ == null) {
        return soil_.get(index);
      } else {
        return soilBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder setSoil(
        int index, Soil value) {
      if (soilBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoilIsMutable();
        soil_.set(index, value);
        onChanged();
      } else {
        soilBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder setSoil(
        int index, Soil.Builder builderForValue) {
      if (soilBuilder_ == null) {
        ensureSoilIsMutable();
        soil_.set(index, builderForValue.build());
        onChanged();
      } else {
        soilBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder addSoil(Soil value) {
      if (soilBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoilIsMutable();
        soil_.add(value);
        onChanged();
      } else {
        soilBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder addSoil(
        int index, Soil value) {
      if (soilBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoilIsMutable();
        soil_.add(index, value);
        onChanged();
      } else {
        soilBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder addSoil(
        Soil.Builder builderForValue) {
      if (soilBuilder_ == null) {
        ensureSoilIsMutable();
        soil_.add(builderForValue.build());
        onChanged();
      } else {
        soilBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder addSoil(
        int index, Soil.Builder builderForValue) {
      if (soilBuilder_ == null) {
        ensureSoilIsMutable();
        soil_.add(index, builderForValue.build());
        onChanged();
      } else {
        soilBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder addAllSoil(
        java.lang.Iterable<? extends Soil> values) {
      if (soilBuilder_ == null) {
        ensureSoilIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, soil_);
        onChanged();
      } else {
        soilBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder clearSoil() {
      if (soilBuilder_ == null) {
        soil_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        soilBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Builder removeSoil(int index) {
      if (soilBuilder_ == null) {
        ensureSoilIsMutable();
        soil_.remove(index);
        onChanged();
      } else {
        soilBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Soil.Builder getSoilBuilder(
        int index) {
      return getSoilFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public SoilOrBuilder getSoilOrBuilder(
        int index) {
      if (soilBuilder_ == null) {
        return soil_.get(index);  } else {
        return soilBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public java.util.List<? extends SoilOrBuilder>
         getSoilOrBuilderList() {
      if (soilBuilder_ != null) {
        return soilBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(soil_);
      }
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Soil.Builder addSoilBuilder() {
      return getSoilFieldBuilder().addBuilder(
          Soil.getDefaultInstance());
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public Soil.Builder addSoilBuilder(
        int index) {
      return getSoilFieldBuilder().addBuilder(
          index, Soil.getDefaultInstance());
    }
    /**
     * <code>repeated .Soil soil = 6;</code>
     */
    public java.util.List<Soil.Builder>
         getSoilBuilderList() {
      return getSoilFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
            Soil, Soil.Builder, SoilOrBuilder>
        getSoilFieldBuilder() {
      if (soilBuilder_ == null) {
        soilBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                Soil, Soil.Builder, SoilOrBuilder>(
                soil_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        soil_ = null;
      }
      return soilBuilder_;
    }

    private float co2Level_ ;
    /**
     * <code>float co2_level = 7;</code>
     * @return The co2Level.
     */
    @java.lang.Override
    public float getCo2Level() {
      return co2Level_;
    }
    /**
     * <code>float co2_level = 7;</code>
     * @param value The co2Level to set.
     * @return This builder for chaining.
     */
    public Builder setCo2Level(float value) {

      co2Level_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>float co2_level = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearCo2Level() {
      bitField0_ = (bitField0_ & ~0x00000040);
      co2Level_ = 0F;
      onChanged();
      return this;
    }

    private float nitrogenLevel_ ;
    /**
     * <code>float nitrogen_level = 8;</code>
     * @return The nitrogenLevel.
     */
    @java.lang.Override
    public float getNitrogenLevel() {
      return nitrogenLevel_;
    }
    /**
     * <code>float nitrogen_level = 8;</code>
     * @param value The nitrogenLevel to set.
     * @return This builder for chaining.
     */
    public Builder setNitrogenLevel(float value) {

      nitrogenLevel_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>float nitrogen_level = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearNitrogenLevel() {
      bitField0_ = (bitField0_ & ~0x00000080);
      nitrogenLevel_ = 0F;
      onChanged();
      return this;
    }

    private int plantType_ = 0;
    /**
     * <code>.PlantType plant_type = 9;</code>
     * @return The enum numeric value on the wire for plantType.
     */
    @java.lang.Override public int getPlantTypeValue() {
      return plantType_;
    }
    /**
     * <code>.PlantType plant_type = 9;</code>
     * @param value The enum numeric value on the wire for plantType to set.
     * @return This builder for chaining.
     */
    public Builder setPlantTypeValue(int value) {
      plantType_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>.PlantType plant_type = 9;</code>
     * @return The plantType.
     */
    @java.lang.Override
    public PlantType getPlantType() {
      PlantType result = PlantType.forNumber(plantType_);
      return result == null ? PlantType.UNRECOGNIZED : result;
    }
    /**
     * <code>.PlantType plant_type = 9;</code>
     * @param value The plantType to set.
     * @return This builder for chaining.
     */
    public Builder setPlantType(PlantType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      plantType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.PlantType plant_type = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlantType() {
      bitField0_ = (bitField0_ & ~0x00000100);
      plantType_ = 0;
      onChanged();
      return this;
    }

    private int fertilizerType_ = 0;
    /**
     * <code>.FertilizerType fertilizer_type = 10;</code>
     * @return The enum numeric value on the wire for fertilizerType.
     */
    @java.lang.Override public int getFertilizerTypeValue() {
      return fertilizerType_;
    }
    /**
     * <code>.FertilizerType fertilizer_type = 10;</code>
     * @param value The enum numeric value on the wire for fertilizerType to set.
     * @return This builder for chaining.
     */
    public Builder setFertilizerTypeValue(int value) {
      fertilizerType_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>.FertilizerType fertilizer_type = 10;</code>
     * @return The fertilizerType.
     */
    @java.lang.Override
    public FertilizerType getFertilizerType() {
      FertilizerType result = FertilizerType.forNumber(fertilizerType_);
      return result == null ? FertilizerType.UNRECOGNIZED : result;
    }
    /**
     * <code>.FertilizerType fertilizer_type = 10;</code>
     * @param value The fertilizerType to set.
     * @return This builder for chaining.
     */
    public Builder setFertilizerType(FertilizerType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000200;
      fertilizerType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.FertilizerType fertilizer_type = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearFertilizerType() {
      bitField0_ = (bitField0_ & ~0x00000200);
      fertilizerType_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:Conditions)
  }

  // @@protoc_insertion_point(class_scope:Conditions)
  private static final Conditions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Conditions();
  }

  public static Conditions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Conditions>
      PARSER = new com.google.protobuf.AbstractParser<Conditions>() {
    @java.lang.Override
    public Conditions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Conditions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Conditions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public Conditions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

